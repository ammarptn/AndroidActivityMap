package com.ammarptn.androidActivityMapGen;


import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

// create by Ammarptn July 2020

public class ActivityMapGenerator {
    public static void main(String[] args) {



        ArrayList<String> activityAndFragmentFileList = new ArrayList<>();
        String entryPoint = "";

        File currentFolder = new File(System.getProperty("user.dir"));
        List<String> fileList = Arrays.asList(currentFolder.list());

        if (fileList.contains("AndroidManifest.xml") && fileList.contains("java")) {
            System.out.println("AndroidManifest.xml found");


        } else {
            System.out.println("AndroidManifest.xml not found");
            return;

        }

        // search for entry point
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;
            builder = factory.newDocumentBuilder();
            Document document = builder.parse(new File(currentFolder, "AndroidManifest.xml"));


            NodeList actionNodeList = document.getElementsByTagName("action");

            for (int i = 0; i < actionNodeList.getLength(); i++) {
                Node actionNode = actionNodeList.item(i);
                Element actionNodeElement = (Element) actionNode;
                if (actionNodeElement.getAttribute("android:name").equals("android.intent.action.MAIN")) {
                    Node parentNode = actionNodeList.item(i).getParentNode().getParentNode();
                    Element parentNodeElement = (Element) parentNode;

                    String[] activitySlot = parentNodeElement.getAttribute("android:name").split("\\.");
                    entryPoint = activitySlot[activitySlot.length - 1];
                }


            }


        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();

        }

        System.out.println("entry Point : " + entryPoint);


        //scan whole android project and extract the Activity/Fragment file

        File javaFolder = new File(currentFolder, "java");
        if (javaFolder.isDirectory()) {
            System.out.println("Java folder found");
            try {
                Files.walk(Paths.get(javaFolder.getAbsolutePath()))
                        .filter(Files::isRegularFile)
                        .forEach(file -> {
                            if (file.getFileName().toString().toLowerCase().contains("fragment") || file.getFileName().toString().toLowerCase().contains("activity")) {
                                activityAndFragmentFileList.add(file.toString());
                            }
                        });
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // create fileNode that contain relation of each Activity/Fragment
        ArrayList<FileNode> nodeList = new ArrayList<>();
        ActivityMapGenerator activityMapGenerator = new ActivityMapGenerator();

        for (int i = 0; i < activityAndFragmentFileList.size(); i++) {

            FileNode fileNode = activityMapGenerator.streamService(activityAndFragmentFileList.get(i));
            nodeList.add(fileNode);


        }

        if (nodeList.size() == 0) {
            System.out.println("file not found");
        } else {

            System.out.println("found " + nodeList.size() + " files");
        }


        // generate IDEA Mind map base on the extracted Activity/Fragment relation

        try {
            File resultFolder = new File(currentFolder, "activityMapResult");
            if (!resultFolder.exists()) {
                boolean mkdir = resultFolder.mkdir();
            }
            FileWriter myWriter = new FileWriter("activityMapResult/activityMap.mmd");
            myWriter.write("Generated by AndroidActivityMapGenerator \nPlease install NB MindMap plugin on your Intellij IDE to view the activity/fragment map in graphical mode \n" +
                    "> __version__=`1.1`,showJumps=`true`\n" +
                    "---\n" +
                    "\n" +
                    "# launch\n");
            activityMapGenerator.writeNodeRelationToFile(entryPoint, 2, myWriter, nodeList, activityAndFragmentFileList);
            myWriter.close();
        } catch (Exception e) {

        }

    }

    void writeNodeRelationToFile(String nodeName, int dept, FileWriter myWriter, ArrayList<FileNode> treeList, ArrayList<String> activityAndFragmentFileList) throws IOException {

        boolean isInfinityLoopDetected = false;

        for (FileNode fileNode : treeList) {

            if (isInfinityLoopDetected) {
                System.out.println("Infinity Loop of Activity/Fragment relation Detected");
                System.exit(0);
            }

            if (fileNode.getName().equals(nodeName)) {

                myWriter.write(getDeptTag(dept) + " " + fileNode.getName() + "\n");
                myWriter.write("- FILE" + "\n");
                myWriter.write("<pre>" + replaceGroup("(\\/.*\\/)app\\/", getPath(fileNode.getName(), activityAndFragmentFileList), 1, "") + "</pre>" + "\n");
                myWriter.write("\n");


                // maximum dept that allow to generate the activity/fragment map
                if (dept < 50) {
                    for (int j = 0; j < fileNode.getChildren().size(); j++) {


                        writeNodeRelationToFile(fileNode.getChildren().get(j), dept + 1, myWriter, treeList, activityAndFragmentFileList);


                    }
                } else {
                    isInfinityLoopDetected = true;


                }
            }
        }


    }

    //replace character base on regex group
    private static String replaceGroup(String regex, String source, int groupToReplace, String replacement) {
        return replaceGroup(regex, source, groupToReplace, 1, replacement);
    }

    private static String replaceGroup(String regex, String source, int groupToReplace, int groupOccurrence, String replacement) {
        Matcher m = Pattern.compile(regex).matcher(source);
        for (int i = 0; i < groupOccurrence; i++)
            if (!m.find()) return source; // pattern not met, may also throw an exception here
        return new StringBuilder(source).replace(m.start(groupToReplace), m.end(groupToReplace), replacement).toString();
    }

    private String getDeptTag(int dept) {
        // create dept tag base on given number
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < dept; i++) {
            sb.append("#");
        }
        return sb.toString();
    }

    private String getPath(String name, ArrayList<String> pathList) {
        //get full path of request file name
        for (String s : pathList) {
            String[] splitPath = s.split("/");
            if (splitPath[splitPath.length - 1].replace(".kt", "").replace(".java", "").equals(name)) {
                return s;
            }
        }
        return null;
    }


    private FileNode streamService(String fileLocation) {

        String ignorePatternString = "\\/\\/map-ignore\\s(.*Fragment|.*Activity)";
        String fragmentPatternString = ".*\\s(.*)\\.newInstance\\(";
        String kotlinActivityPatternString = ".*\\s(.*Activity)::";//kotlin
        String javaActivityPatternString = ".*\\s(.*Activity)\\.class";//java


        FileNode fileNode = new FileNode();

        // remove extension from the file name
        fileNode.setName(getFileNameFromPath(fileLocation).replace(".kt", "").replace(".java", ""));

        ArrayList<String> childList = new ArrayList();
        ArrayList<String> ignoreList = new ArrayList();

        //Read the file line by line
        try (Stream<String> stream = Files.lines(Paths.get(fileLocation))) {

            //search for the line that contain Fragment or Activity
            stream.filter(lines -> lines.contains("Fragment") || lines.contains("Activity"))

                    .forEach(result -> {

                        //search for ignore indicator
                        Pattern ignorePattern = Pattern.compile(ignorePatternString);
                        Matcher ignorePatternMatcher = ignorePattern.matcher(result);
                        boolean ignorePatternMatches = ignorePatternMatcher.find();
                        if (ignorePatternMatches) {
                            if (ignorePatternMatcher.group(1) != null) {
                                ignoreList.add(ignorePatternMatcher.group(1).trim());

                            }
                        }

                        // search for activity/fragment that will be launch from this file
                        // if founded any activity/fragment and not in the ignore list
                        // then get the activity name and save in the list
                        Pattern pattern = Pattern.compile(fragmentPatternString + "|" + kotlinActivityPatternString + "|" + javaActivityPatternString);
                        Matcher matcher = pattern.matcher(result);
                        boolean matches = matcher.find();
                        if (matches) {

                            //check if it match with fragment pattern
                            if (matcher.group(1) != null) {

                                String matchItem = matcher.group(1).trim();
                                if (!ignoreList.contains(matchItem)) {
                                    if (!childList.contains(matchItem)) {
                                        childList.add(matchItem);
                                    }
                                }

                            }
                            //check if it match with activity pattern (kotlin)
                            else if (matcher.group(2) != null) {

                                String matchItem = matcher.group(2).trim();
                                if (!ignoreList.contains(matchItem)) {
                                    if (!childList.contains(matchItem)) {
                                        childList.add(matchItem);
                                    }
                                }

                            }
                            //check if it match with activity pattern (Java)
                            else if (matcher.group(3) != null) {
                                String matchItem = matcher.group(3).trim();
                                if (!ignoreList.contains(matchItem)) {
                                    if (!childList.contains(matchItem)) {
                                        childList.add(matchItem);
                                    }
                                }

                            }
                        }


                    });

            fileNode.setChildren(childList);

        } catch (IOException e) {
            e.printStackTrace();
        }
        return fileNode;
    }

    String getFileNameFromPath(String path) {
        // get file name from full path
        String[] pathSlot = path.split("/");
        return pathSlot[pathSlot.length - 1];
    }

    class FileNode {

        String name;
        List<String> children;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<String> getChildren() {
            return children;
        }

        public void setChildren(List<String> children) {
            this.children = children;
        }
    }


}

